# module.app.data.aws_iam_policy_document.cdn_bucket:
data "aws_iam_policy_document" "cdn_bucket" {
    id            = "1553217289"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "s3:GetObject"
                    Condition = {
                        StringEquals = {
                            "aws:SourceArn" = "arn:aws:cloudfront::194722422414:distribution/E1EP4JFNF15R87"
                        }
                    }
                    Effect    = "Allow"
                    Principal = {
                        Service = "cloudfront.amazonaws.com"
                    }
                    Resource  = "arn:aws:s3:::seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9/*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "s3:GetObject"
                    Condition = {
                        StringEquals = {
                            "aws:SourceArn" = "arn:aws:cloudfront::194722422414:distribution/E1EP4JFNF15R87"
                        }
                    }
                    Effect    = "Allow"
                    Principal = {
                        Service = "cloudfront.amazonaws.com"
                    }
                    Resource  = "arn:aws:s3:::seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9/*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "s3:GetObject",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:s3:::seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9/*",
        ]
        sid           = null

        condition {
            test     = "StringEquals"
            values   = [
                "arn:aws:cloudfront::194722422414:distribution/E1EP4JFNF15R87",
            ]
            variable = "aws:SourceArn"
        }

        principals {
            identifiers = [
                "cloudfront.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.app.aws_lambda_permission.api["GET /api/hello"]:
resource "aws_lambda_permission" "api" {
    action              = "lambda:InvokeFunction"
    function_name       = "seahax-api-GET-hello"
    id                  = "apigateway"
    principal           = "apigateway.amazonaws.com"
    qualifier           = null
    source_arn          = "arn:aws:execute-api:us-east-2:194722422414:o3muvck9vg/*"
    statement_id        = "apigateway"
    statement_id_prefix = null
}

# module.app.aws_s3_bucket_policy.cdn_bucket:
resource "aws_s3_bucket_policy" "cdn_bucket" {
    bucket = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    id     = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    policy = jsonencode(
        {
            Statement = [
                {
                    Action    = "s3:GetObject"
                    Condition = {
                        StringEquals = {
                            "aws:SourceArn" = "arn:aws:cloudfront::194722422414:distribution/E1EP4JFNF15R87"
                        }
                    }
                    Effect    = "Allow"
                    Principal = {
                        Service = "cloudfront.amazonaws.com"
                    }
                    Resource  = "arn:aws:s3:::seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9/*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
}

# module.app.aws_secretsmanager_secret_rotation.api_key_secret_rotation:
resource "aws_secretsmanager_secret_rotation" "api_key_secret_rotation" {
    id                  = "arn:aws:secretsmanager:us-east-2:194722422414:secret:seahax-api-key-20241114080810031200000001-nxhykx"
    rotate_immediately  = true
    rotation_enabled    = true
    rotation_lambda_arn = "arn:aws:lambda:us-east-2:194722422414:function:seahax-api-key-rotation"
    secret_id           = "arn:aws:secretsmanager:us-east-2:194722422414:secret:seahax-api-key-20241114080810031200000001-nxhykx"

    rotation_rules {
        automatically_after_days = 30
        duration                 = null
        schedule_expression      = null
    }
}

# module.app.random_uuid.api_key_initial_value:
resource "random_uuid" "api_key_initial_value" {
    id     = "6056a9eb-b8e8-2eb8-206c-db0e540e352e"
    result = "6056a9eb-b8e8-2eb8-206c-db0e540e352e"
}

# module.app.random_uuid.cdn_bucket_suffix:
resource "random_uuid" "cdn_bucket_suffix" {
    id     = "58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    result = "58c49280-f83f-3fcc-04bb-bb682b66ebd9"
}

# module.app.module.api.aws_apigatewayv2_api.this[0]:
resource "aws_apigatewayv2_api" "this" {
    api_endpoint                 = "https://o3muvck9vg.execute-api.us-east-2.amazonaws.com"
    api_key_selection_expression = "$request.header.x-api-key"
    arn                          = "arn:aws:apigateway:us-east-2::/apis/o3muvck9vg"
    description                  = null
    disable_execute_api_endpoint = false
    execution_arn                = "arn:aws:execute-api:us-east-2:194722422414:o3muvck9vg"
    id                           = "o3muvck9vg"
    name                         = "seahax"
    protocol_type                = "HTTP"
    route_selection_expression   = "$request.method $request.path"
    tags                         = {
        "terraform-aws-modules" = "apigateway-v2"
    }
    tags_all                     = {
        "terraform-aws-modules" = "apigateway-v2"
    }
    version                      = null
}

# module.app.module.api.aws_apigatewayv2_integration.this["GET /api/hello"]:
resource "aws_apigatewayv2_integration" "this" {
    api_id                                    = "o3muvck9vg"
    connection_id                             = null
    connection_type                           = "INTERNET"
    content_handling_strategy                 = null
    credentials_arn                           = null
    description                               = null
    id                                        = "5bb61h5"
    integration_method                        = "POST"
    integration_response_selection_expression = null
    integration_subtype                       = null
    integration_type                          = "AWS_PROXY"
    integration_uri                           = "arn:aws:lambda:us-east-2:194722422414:function:seahax-api-GET-hello"
    passthrough_behavior                      = null
    payload_format_version                    = "2.0"
    request_parameters                        = {}
    request_templates                         = {}
    template_selection_expression             = null
    timeout_milliseconds                      = 4000
}

# module.app.module.api.aws_apigatewayv2_route.this["GET /api/hello"]:
resource "aws_apigatewayv2_route" "this" {
    api_id                              = "o3muvck9vg"
    api_key_required                    = false
    authorization_scopes                = []
    authorization_type                  = "NONE"
    authorizer_id                       = null
    id                                  = "phxkejk"
    model_selection_expression          = null
    operation_name                      = null
    request_models                      = {}
    route_key                           = "GET /api/hello"
    route_response_selection_expression = null
    target                              = "integrations/5bb61h5"
}

# module.app.module.api.aws_apigatewayv2_stage.this[0]:
resource "aws_apigatewayv2_stage" "this" {
    api_id                = "o3muvck9vg"
    arn                   = "arn:aws:apigateway:us-east-2::/apis/o3muvck9vg/stages/$default"
    auto_deploy           = true
    client_certificate_id = null
    deployment_id         = "gka8ae"
    description           = null
    execution_arn         = "arn:aws:execute-api:us-east-2:194722422414:o3muvck9vg/$default"
    id                    = "$default"
    invoke_url            = "https://o3muvck9vg.execute-api.us-east-2.amazonaws.com/"
    name                  = "$default"
    stage_variables       = {}
    tags                  = {}
    tags_all              = {}

    access_log_settings {
        destination_arn = "arn:aws:logs:us-east-2:194722422414:log-group:/aws/apigateway/seahax/default"
        format          = jsonencode(
            {
                context = {
                    domainName              = "$context.domainName"
                    error                   = {
                        message      = "$context.error.message"
                        responseType = "$context.error.responseType"
                    }
                    identity                = {
                        sourceIP = "$context.identity.sourceIp"
                    }
                    integration             = {
                        error             = "$context.integration.error"
                        integrationStatus = "$context.integration.integrationStatus"
                    }
                    integrationErrorMessage = "$context.integrationErrorMessage"
                    protocol                = "$context.protocol"
                    requestId               = "$context.requestId"
                    requestTime             = "$context.requestTime"
                    responseLength          = "$context.responseLength"
                    routeKey                = "$context.routeKey"
                    stage                   = "$context.stage"
                    status                  = "$context.status"
                }
            }
        )
    }

    default_route_settings {
        data_trace_enabled       = false
        detailed_metrics_enabled = true
        logging_level            = null
        throttling_burst_limit   = 500
        throttling_rate_limit    = 1000
    }

    route_settings {
        data_trace_enabled       = false
        detailed_metrics_enabled = true
        logging_level            = null
        route_key                = "GET /api/hello"
        throttling_burst_limit   = 500
        throttling_rate_limit    = 1000
    }
}

# module.app.module.api.aws_cloudwatch_log_group.this["this"]:
resource "aws_cloudwatch_log_group" "this" {
    arn               = "arn:aws:logs:us-east-2:194722422414:log-group:/aws/apigateway/seahax/default"
    id                = "/aws/apigateway/seahax/default"
    kms_key_id        = null
    log_group_class   = "STANDARD"
    name              = "/aws/apigateway/seahax/default"
    name_prefix       = null
    retention_in_days = 30
    skip_destroy      = false
    tags              = {}
    tags_all          = {}
}

# module.app.module.api_key_secret.aws_secretsmanager_secret.this[0]:
resource "aws_secretsmanager_secret" "this" {
    arn                            = "arn:aws:secretsmanager:us-east-2:194722422414:secret:seahax-api-key-20241114080810031200000001-nxhykx"
    description                    = "API key for limiting API gateway access to cloudfront within app 'seahax'."
    force_overwrite_replica_secret = false
    id                             = "arn:aws:secretsmanager:us-east-2:194722422414:secret:seahax-api-key-20241114080810031200000001-nxhykx"
    kms_key_id                     = null
    name                           = "seahax-api-key-20241114080810031200000001"
    name_prefix                    = "seahax-api-key-"
    policy                         = null
    recovery_window_in_days        = 0
    tags                           = {}
    tags_all                       = {}
}

# module.app.module.api_key_secret.aws_secretsmanager_secret_version.ignore_changes[0]:
resource "aws_secretsmanager_secret_version" "ignore_changes" {
    arn            = "arn:aws:secretsmanager:us-east-2:194722422414:secret:seahax-api-key-20241114080810031200000001-nxhykx"
    id             = "arn:aws:secretsmanager:us-east-2:194722422414:secret:seahax-api-key-20241114080810031200000001-nxhykx|terraform-20241114080810488000000003"
    secret_binary  = (sensitive value)
    secret_id      = "arn:aws:secretsmanager:us-east-2:194722422414:secret:seahax-api-key-20241114080810031200000001-nxhykx"
    secret_string  = (sensitive value)
    version_id     = "terraform-20241114080810488000000003"
    version_stages = [
        "AWSPREVIOUS",
    ]
}

# module.app.module.api_key_secret_rotation_lambda.data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "194722422414"
    arn        = "arn:aws:iam::194722422414:user/ci"
    id         = "194722422414"
    user_id    = "AIDAS2VS4L2HGNF3C3P5U"
}

# module.app.module.api_key_secret_rotation_lambda.data.aws_iam_policy_document.assume_role[0]:
data "aws_iam_policy_document" "assume_role" {
    id            = "2690255455"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "lambda.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "lambda.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = null

        principals {
            identifiers = [
                "lambda.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.app.module.api_key_secret_rotation_lambda.data.aws_iam_policy_document.logs[0]:
data "aws_iam_policy_document" "logs" {
    id            = "1547324960"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "logs:PutLogEvents",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation:*:*",
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation:*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "logs:PutLogEvents",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation:*:*",
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation:*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation:*",
            "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation:*:*",
        ]
        sid           = null
    }
}

# module.app.module.api_key_secret_rotation_lambda.data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.app.module.api_key_secret_rotation_lambda.data.aws_region.current:
data "aws_region" "current" {
    description = "US East (Ohio)"
    endpoint    = "ec2.us-east-2.amazonaws.com"
    id          = "us-east-2"
    name        = "us-east-2"
}

# module.app.module.api_key_secret_rotation_lambda.aws_cloudwatch_log_group.lambda[0]:
resource "aws_cloudwatch_log_group" "lambda" {
    arn               = "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation"
    id                = "/aws/lambda/seahax-api-key-rotation"
    kms_key_id        = null
    log_group_class   = "STANDARD"
    name              = "/aws/lambda/seahax-api-key-rotation"
    name_prefix       = null
    retention_in_days = 0
    skip_destroy      = false
    tags              = {}
    tags_all          = {}
}

# module.app.module.api_key_secret_rotation_lambda.aws_iam_policy.additional_json[0]:
resource "aws_iam_policy" "additional_json" {
    arn              = "arn:aws:iam::194722422414:policy/seahax-api-key-rotation"
    attachment_count = 1
    description      = null
    id               = "arn:aws:iam::194722422414:policy/seahax-api-key-rotation"
    name             = "seahax-api-key-rotation"
    name_prefix      = null
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "secretsmanager:DescribeSecret",
                        "secretsmanager:GetSecretValue",
                        "secretsmanager:PutSecretValue",
                        "secretsmanager:UpdateSecretVersionStage",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:secretsmanager:us-east-2:194722422414:secret:seahax-api-key-20241114080810031200000001-nxhykx",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPAS2VS4L2HGFOR7B3KC"
    tags             = {}
    tags_all         = {}
}

# module.app.module.api_key_secret_rotation_lambda.aws_iam_policy.logs[0]:
resource "aws_iam_policy" "logs" {
    arn              = "arn:aws:iam::194722422414:policy/seahax-api-key-rotation-logs"
    attachment_count = 1
    description      = null
    id               = "arn:aws:iam::194722422414:policy/seahax-api-key-rotation-logs"
    name             = "seahax-api-key-rotation-logs"
    name_prefix      = null
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "logs:PutLogEvents",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation:*:*",
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-key-rotation:*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPAS2VS4L2HFFF7HKECU"
    tags             = {}
    tags_all         = {}
}

# module.app.module.api_key_secret_rotation_lambda.aws_iam_role.lambda[0]:
resource "aws_iam_role" "lambda" {
    arn                   = "arn:aws:iam::194722422414:role/seahax-api-key-rotation"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "lambda.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-14T08:08:10Z"
    description           = null
    force_detach_policies = true
    id                    = "seahax-api-key-rotation"
    managed_policy_arns   = [
        "arn:aws:iam::194722422414:policy/seahax-api-key-rotation",
        "arn:aws:iam::194722422414:policy/seahax-api-key-rotation-logs",
    ]
    max_session_duration  = 3600
    name                  = "seahax-api-key-rotation"
    name_prefix           = null
    path                  = "/"
    permissions_boundary  = null
    tags                  = {}
    tags_all              = {}
    unique_id             = "AROAS2VS4L2HCMD37C7SP"
}

# module.app.module.api_key_secret_rotation_lambda.aws_iam_role_policy_attachment.additional_json[0]:
resource "aws_iam_role_policy_attachment" "additional_json" {
    id         = "seahax-api-key-rotation-20241114080811162000000004"
    policy_arn = "arn:aws:iam::194722422414:policy/seahax-api-key-rotation"
    role       = "seahax-api-key-rotation"
}

# module.app.module.api_key_secret_rotation_lambda.aws_iam_role_policy_attachment.logs[0]:
resource "aws_iam_role_policy_attachment" "logs" {
    id         = "seahax-api-key-rotation-20241114080811216100000005"
    policy_arn = "arn:aws:iam::194722422414:policy/seahax-api-key-rotation-logs"
    role       = "seahax-api-key-rotation"
}

# module.app.module.api_key_secret_rotation_lambda.aws_lambda_function.this[0]:
resource "aws_lambda_function" "this" {
    architectures                  = [
        "arm64",
    ]
    arn                            = "arn:aws:lambda:us-east-2:194722422414:function:seahax-api-key-rotation"
    code_sha256                    = "4awBxEzSn0FLEjZblBRYW2LquWJXwldmjxAayUoXw54="
    code_signing_config_arn        = null
    description                    = "Lambda function which rotates the API key for app 'seahax'."
    filename                       = "../modules/aws-app/../../../packages/aws-lambda-secret-rotation/dist/bundle.zip"
    function_name                  = "seahax-api-key-rotation"
    handler                        = "index.handler"
    id                             = "seahax-api-key-rotation"
    image_uri                      = null
    invoke_arn                     = "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:194722422414:function:seahax-api-key-rotation/invocations"
    kms_key_arn                    = null
    last_modified                  = "2024-11-14T08:28:45.000+0000"
    layers                         = []
    memory_size                    = 128
    package_type                   = "Zip"
    publish                        = false
    qualified_arn                  = "arn:aws:lambda:us-east-2:194722422414:function:seahax-api-key-rotation:$LATEST"
    qualified_invoke_arn           = "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:194722422414:function:seahax-api-key-rotation:$LATEST/invocations"
    reserved_concurrent_executions = -1
    role                           = "arn:aws:iam::194722422414:role/seahax-api-key-rotation"
    runtime                        = "nodejs20.x"
    signing_job_arn                = null
    signing_profile_version_arn    = null
    skip_destroy                   = false
    source_code_hash               = "4awBxEzSn0FLEjZblBRYW2LquWJXwldmjxAayUoXw54="
    source_code_size               = 275361
    tags                           = {
        "terraform-aws-modules" = "lambda"
    }
    tags_all                       = {
        "terraform-aws-modules" = "lambda"
    }
    timeout                        = 3
    version                        = "$LATEST"

    ephemeral_storage {
        size = 512
    }

    logging_config {
        application_log_level = null
        log_format            = "Text"
        log_group             = "/aws/lambda/seahax-api-key-rotation"
        system_log_level      = null
    }

    tracing_config {
        mode = "PassThrough"
    }
}

# module.app.module.api_key_secret_rotation_lambda.aws_lambda_permission.unqualified_alias_triggers["secrets_manager"]:
resource "aws_lambda_permission" "unqualified_alias_triggers" {
    action              = "lambda:InvokeFunction"
    function_name       = "seahax-api-key-rotation"
    id                  = "secrets_manager20241114080822312500000007"
    principal           = "secretsmanager.amazonaws.com"
    qualifier           = null
    statement_id        = "secrets_manager20241114080822312500000007"
    statement_id_prefix = "secrets_manager"
}

# module.app.module.api_lambda["GET /api/hello"].data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "194722422414"
    arn        = "arn:aws:iam::194722422414:user/ci"
    id         = "194722422414"
    user_id    = "AIDAS2VS4L2HGNF3C3P5U"
}

# module.app.module.api_lambda["GET /api/hello"].data.aws_iam_policy_document.assume_role[0]:
data "aws_iam_policy_document" "assume_role" {
    id            = "2690255455"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "lambda.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "lambda.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = null

        principals {
            identifiers = [
                "lambda.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.app.module.api_lambda["GET /api/hello"].data.aws_iam_policy_document.logs[0]:
data "aws_iam_policy_document" "logs" {
    id            = "3703705985"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "logs:PutLogEvents",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello:*:*",
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello:*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "logs:PutLogEvents",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello:*:*",
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello:*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello:*",
            "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello:*:*",
        ]
        sid           = null
    }
}

# module.app.module.api_lambda["GET /api/hello"].data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.app.module.api_lambda["GET /api/hello"].data.aws_region.current:
data "aws_region" "current" {
    description = "US East (Ohio)"
    endpoint    = "ec2.us-east-2.amazonaws.com"
    id          = "us-east-2"
    name        = "us-east-2"
}

# module.app.module.api_lambda["GET /api/hello"].aws_cloudwatch_log_group.lambda[0]:
resource "aws_cloudwatch_log_group" "lambda" {
    arn               = "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello"
    id                = "/aws/lambda/seahax-api-GET-hello"
    kms_key_id        = null
    log_group_class   = "STANDARD"
    name              = "/aws/lambda/seahax-api-GET-hello"
    name_prefix       = null
    retention_in_days = 0
    skip_destroy      = false
    tags              = {}
    tags_all          = {}
}

# module.app.module.api_lambda["GET /api/hello"].aws_iam_policy.logs[0]:
resource "aws_iam_policy" "logs" {
    arn              = "arn:aws:iam::194722422414:policy/seahax-api-GET-hello-logs"
    attachment_count = 1
    description      = null
    id               = "arn:aws:iam::194722422414:policy/seahax-api-GET-hello-logs"
    name             = "seahax-api-GET-hello-logs"
    name_prefix      = null
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "logs:PutLogEvents",
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello:*:*",
                        "arn:aws:logs:us-east-2:194722422414:log-group:/aws/lambda/seahax-api-GET-hello:*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPAS2VS4L2HEBP2QS7NU"
    tags             = {}
    tags_all         = {}
}

# module.app.module.api_lambda["GET /api/hello"].aws_iam_role.lambda[0]:
resource "aws_iam_role" "lambda" {
    arn                   = "arn:aws:iam::194722422414:role/seahax-api-GET-hello"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "lambda.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-15T07:04:41Z"
    description           = null
    force_detach_policies = true
    id                    = "seahax-api-GET-hello"
    managed_policy_arns   = [
        "arn:aws:iam::194722422414:policy/seahax-api-GET-hello-logs",
    ]
    max_session_duration  = 3600
    name                  = "seahax-api-GET-hello"
    name_prefix           = null
    path                  = "/"
    permissions_boundary  = null
    tags                  = {}
    tags_all              = {}
    unique_id             = "AROAS2VS4L2HJAMXFLUFK"
}

# module.app.module.api_lambda["GET /api/hello"].aws_iam_role_policy_attachment.logs[0]:
resource "aws_iam_role_policy_attachment" "logs" {
    id         = "seahax-api-GET-hello-20241115070441979900000001"
    policy_arn = "arn:aws:iam::194722422414:policy/seahax-api-GET-hello-logs"
    role       = "seahax-api-GET-hello"
}

# module.app.module.api_lambda["GET /api/hello"].aws_lambda_function.this[0]:
resource "aws_lambda_function" "this" {
    architectures                  = [
        "arm64",
    ]
    arn                            = "arn:aws:lambda:us-east-2:194722422414:function:seahax-api-GET-hello"
    code_sha256                    = "AxPKVPYY8UFfeAoYF1Vwgm04oSoB2Qy7KnKcO4PGBcE="
    code_signing_config_arn        = null
    description                    = null
    filename                       = "./../../packages/aws-lambda-api-default/dist/bundle.zip"
    function_name                  = "seahax-api-GET-hello"
    handler                        = "index.handler"
    id                             = "seahax-api-GET-hello"
    image_uri                      = null
    invoke_arn                     = "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:194722422414:function:seahax-api-GET-hello/invocations"
    kms_key_arn                    = null
    last_modified                  = "2024-11-15T07:04:50.747+0000"
    layers                         = []
    memory_size                    = 128
    package_type                   = "Zip"
    publish                        = false
    qualified_arn                  = "arn:aws:lambda:us-east-2:194722422414:function:seahax-api-GET-hello:$LATEST"
    qualified_invoke_arn           = "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:194722422414:function:seahax-api-GET-hello:$LATEST/invocations"
    reserved_concurrent_executions = -1
    role                           = "arn:aws:iam::194722422414:role/seahax-api-GET-hello"
    runtime                        = "nodejs20.x"
    signing_job_arn                = null
    signing_profile_version_arn    = null
    skip_destroy                   = false
    source_code_hash               = "AxPKVPYY8UFfeAoYF1Vwgm04oSoB2Qy7KnKcO4PGBcE="
    source_code_size               = 1060
    tags                           = {
        "terraform-aws-modules" = "lambda"
    }
    tags_all                       = {
        "terraform-aws-modules" = "lambda"
    }
    timeout                        = 3
    version                        = "$LATEST"

    ephemeral_storage {
        size = 512
    }

    logging_config {
        application_log_level = null
        log_format            = "Text"
        log_group             = "/aws/lambda/seahax-api-GET-hello"
        system_log_level      = null
    }

    tracing_config {
        mode = "PassThrough"
    }
}

# module.app.module.cdn.aws_cloudfront_distribution.this[0]:
resource "aws_cloudfront_distribution" "this" {
    aliases                         = []
    arn                             = "arn:aws:cloudfront::194722422414:distribution/E1EP4JFNF15R87"
    caller_reference                = "terraform-20241114233149620700000001"
    continuous_deployment_policy_id = null
    default_root_object             = "index.html"
    domain_name                     = "d6uex69q19pyj.cloudfront.net"
    enabled                         = true
    etag                            = "E3L298VN9W9TA8"
    hosted_zone_id                  = "Z2FDTNDATAQYW2"
    http_version                    = "http2and3"
    id                              = "E1EP4JFNF15R87"
    in_progress_validation_batches  = 0
    is_ipv6_enabled                 = false
    last_modified_time              = "2024-11-15 09:06:55.709 +0000 UTC"
    price_class                     = "PriceClass_All"
    retain_on_delete                = false
    staging                         = false
    status                          = "Deployed"
    tags                            = {
        "Name" = "seahax-cdn"
    }
    tags_all                        = {
        "Name" = "seahax-cdn"
    }
    trusted_key_groups              = [
        {
            enabled = false
            items   = []
        },
    ]
    trusted_signers                 = [
        {
            enabled = false
            items   = []
        },
    ]
    wait_for_deployment             = false
    web_acl_id                      = null

    custom_error_response {
        error_caching_min_ttl = 0
        error_code            = 403
        response_code         = 200
        response_page_path    = "/index.html"
    }
    custom_error_response {
        error_caching_min_ttl = 0
        error_code            = 404
        response_code         = 200
        response_page_path    = "/index.html"
    }

    default_cache_behavior {
        allowed_methods            = [
            "GET",
            "HEAD",
            "OPTIONS",
        ]
        cache_policy_id            = "658327ea-f89d-4fab-a63d-7e88639e58f6"
        cached_methods             = [
            "GET",
            "HEAD",
        ]
        compress                   = true
        default_ttl                = 0
        field_level_encryption_id  = null
        max_ttl                    = 0
        min_ttl                    = 0
        origin_request_policy_id   = "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf"
        realtime_log_config_arn    = null
        response_headers_policy_id = null
        smooth_streaming           = false
        target_origin_id           = "cdn_bucket_group"
        trusted_key_groups         = []
        trusted_signers            = []
        viewer_protocol_policy     = "redirect-to-https"
    }

    ordered_cache_behavior {
        allowed_methods            = [
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
        ]
        cache_policy_id            = "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
        cached_methods             = [
            "GET",
            "HEAD",
        ]
        compress                   = false
        default_ttl                = 0
        field_level_encryption_id  = null
        max_ttl                    = 0
        min_ttl                    = 0
        origin_request_policy_id   = "b689b0a8-53d0-40ab-baf2-68738e2966ac"
        path_pattern               = "/api/*"
        realtime_log_config_arn    = null
        response_headers_policy_id = "67f7725c-6f97-4210-82d7-5512b31e9d03"
        smooth_streaming           = false
        target_origin_id           = "api"
        trusted_key_groups         = []
        trusted_signers            = []
        viewer_protocol_policy     = "redirect-to-https"
    }

    origin {
        connection_attempts      = 3
        connection_timeout       = 10
        domain_name              = "o3muvck9vg.execute-api.us-east-2.amazonaws.com"
        origin_access_control_id = null
        origin_id                = "api"
        origin_path              = null

        custom_origin_config {
            http_port                = 80
            https_port               = 443
            origin_keepalive_timeout = 5
            origin_protocol_policy   = "https-only"
            origin_read_timeout      = 5
            origin_ssl_protocols     = [
                "TLSv1.2",
            ]
        }
    }
    origin {
        connection_attempts      = 3
        connection_timeout       = 10
        domain_name              = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9.s3.us-east-2.amazonaws.com"
        origin_access_control_id = "E3H3IWWQ8U3H8H"
        origin_id                = "cdn_bucket"
        origin_path              = null
    }
    origin {
        connection_attempts      = 3
        connection_timeout       = 10
        domain_name              = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9.s3.us-east-2.amazonaws.com"
        origin_access_control_id = "E3H3IWWQ8U3H8H"
        origin_id                = "cdn_bucket_archive"
        origin_path              = "/archive"
    }

    origin_group {
        origin_id = "cdn_bucket_group"

        failover_criteria {
            status_codes = [
                403,
                404,
            ]
        }

        member {
            origin_id = "cdn_bucket"
        }
        member {
            origin_id = "cdn_bucket_archive"
        }
    }

    restrictions {
        geo_restriction {
            locations        = []
            restriction_type = "none"
        }
    }

    viewer_certificate {
        acm_certificate_arn            = null
        cloudfront_default_certificate = true
        iam_certificate_id             = null
        minimum_protocol_version       = "TLSv1"
        ssl_support_method             = null
    }
}

# module.app.module.cdn.aws_cloudfront_origin_access_control.this["cdn_bucket"]:
resource "aws_cloudfront_origin_access_control" "this" {
    description                       = "Access to the CDN static content S3 bucket."
    etag                              = "ETVPDKIKX0DER"
    id                                = "E3H3IWWQ8U3H8H"
    name                              = "cdn_bucket"
    origin_access_control_origin_type = "s3"
    signing_behavior                  = "always"
    signing_protocol                  = "sigv4"
}

# module.app.module.cdn_bucket.data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "194722422414"
    arn        = "arn:aws:iam::194722422414:user/ci"
    id         = "194722422414"
    user_id    = "AIDAS2VS4L2HGNF3C3P5U"
}

# module.app.module.cdn_bucket.data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.app.module.cdn_bucket.data.aws_region.current:
data "aws_region" "current" {
    description = "US East (Ohio)"
    endpoint    = "ec2.us-east-2.amazonaws.com"
    id          = "us-east-2"
    name        = "us-east-2"
}

# module.app.module.cdn_bucket.aws_s3_bucket.this[0]:
resource "aws_s3_bucket" "this" {
    acceleration_status         = null
    arn                         = "arn:aws:s3:::seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    bucket                      = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    bucket_domain_name          = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9.s3.amazonaws.com"
    bucket_prefix               = null
    bucket_regional_domain_name = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9.s3.us-east-2.amazonaws.com"
    force_destroy               = true
    hosted_zone_id              = "Z2O1EMRO9K5GLX"
    id                          = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    object_lock_enabled         = false
    policy                      = jsonencode(
        {
            Statement = [
                {
                    Action    = "s3:GetObject"
                    Condition = {
                        StringEquals = {
                            "aws:SourceArn" = "arn:aws:cloudfront::194722422414:distribution/E1EP4JFNF15R87"
                        }
                    }
                    Effect    = "Allow"
                    Principal = {
                        Service = "cloudfront.amazonaws.com"
                    }
                    Resource  = "arn:aws:s3:::seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9/*"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    region                      = "us-east-2"
    request_payer               = "BucketOwner"
    tags                        = {
        "Name" = "seahax-cdn-bucket"
    }
    tags_all                    = {
        "Name" = "seahax-cdn-bucket"
    }

    grant {
        id          = "a5e20c5e4fa6dd686255338ad372da36be43dbbf49fbb55c3fc065b0cb2e99a0"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
        uri         = null
    }
    grant {
        id          = "c4c1ede66af53448b93c283ce9448c4ba468c9432aa01d700d3878632f77d2d0"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
        uri         = null
    }

    lifecycle_rule {
        abort_incomplete_multipart_upload_days = 0
        enabled                                = true
        id                                     = "archive"
        prefix                                 = "archive/"
        tags                                   = {}

        expiration {
            date                         = null
            days                         = 365
            expired_object_delete_marker = false
        }
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                kms_master_key_id = null
                sse_algorithm     = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

# module.app.module.cdn_bucket.aws_s3_bucket_lifecycle_configuration.this[0]:
resource "aws_s3_bucket_lifecycle_configuration" "this" {
    bucket                                 = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    expected_bucket_owner                  = null
    id                                     = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    transition_default_minimum_object_size = "all_storage_classes_128K"

    rule {
        id     = "archive"
        prefix = null
        status = "Enabled"

        expiration {
            date                         = null
            days                         = 365
            expired_object_delete_marker = false
        }

        filter {
            object_size_greater_than = null
            object_size_less_than    = null
            prefix                   = "archive/"
        }
    }
}

# module.app.module.cdn_bucket.aws_s3_bucket_public_access_block.this[0]:
resource "aws_s3_bucket_public_access_block" "this" {
    block_public_acls       = true
    block_public_policy     = true
    bucket                  = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    id                      = "seahax-cdn-bucket-58c49280-f83f-3fcc-04bb-bb682b66ebd9"
    ignore_public_acls      = true
    restrict_public_buckets = true
}

